<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[iOS NSTimer定时器的使用记录]]></title>
    <url>%2F2017%2F05%2F14%2FiOS-NSTimer%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[iOS NSTimer定时器的使用记录 12//定时器 @property (strong, nonatomic) NSTimer *timer; 成员变量1234567@property (copy) NSDate *fireDate; 这是设置定时器的启动时间，常用来管理定时器的启动与停止@property (readonly) NSTimeInterval timeInterval;这个是一个只读属性，获取定时器调用间隔时间。@property (readonly, getter=isValid) BOOL valid; 获取定时器是否有效@property (readonly, retain) id userInfo; 获取参数信息 两种常用的初始化方法第一种： 123456789/***初始化一个定时器,但没有加入到runloop,所以不会执行,需要手动添加到runloop然后执行*@param ti 定时器调用间隔时间*@param aTarget 发送的对象，如self*@param aSelector 方法选择器*@param userInfo 参数信息*@param yesOrNo 是否循环执行（YES将循环，NO将只执行一次）*/+ (NSTimer *)timerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(id)userInfo repeats:(BOOL)yesOrNo; 第二种： 123456789/***初始化一个定时器的同时直接将这个定时器加入主循环，不用自己添加*@param ti 定时器调用间隔时间*@param aTarget 发送的对象，如self*@param aSelector 方法选择器*@param userInfo 参数信息*@param yesOrNo 是否循环执行（YES将循环，NO将只执行一次）*/+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(id)userInfo repeats:(BOOL)yesOrNo; 定时器的开启、暂停、停止123456789//启动定时器 timer.fireDate = [NSDate distantPast];//暂停定时器timer.fireDate = [NSDate distantFuture];//取消定时器（停止timer的运行，这个是永久的停止，这也是唯一可以将计时器从runloop中移出的方法。）//注意：停止后，一定要将timer赋空，否则还是没有释放[timer invalidate]; timer = nil; 举例12345678//第一种，使用 timerWithTimeInterval:target:selector:userInfo:repeats: 方法 (指定0.1秒后自动触发timerRepeat:方法)timer = [NSTimer timerWithTimeInterval:0.1target:selfselector:@selector(timerRepeat:)userInfo:nil repeats:YES];//将定时器加入主循环中 [[NSRunLoop currentRunLoop] addTimer:timerforMode:NSRunLoopCommonModes]; 123456//第二种，使用 scheduledTimerWithTimeInterval:target:selector:userInfo:repeats: 方法(指定0.1秒后自动触发timerRepeat:方法)timer = [NSTimer scheduledTimerWithTimeInterval:0.1target:selfselector:@selector(timerRepeat:)userInfo:nilrepeats:YES];]]></content>
      <categories>
        <category>Objective C</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo 使用记录]]></title>
    <url>%2F2017%2F05%2F11%2FHexo-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[Hexo 使用记录 开发环境清理 提要：mac自带ruby用ruby来安装brew，并管理brew的升级用brew来安装nvm，并管理nvm的升级用nvm来安装node.js，并管理node.js的升级参考资料：Mac OSX下重装node.js 常用命令1234567$ hexo new "postName" #新建文章$ hexo new page "pageName" # 新建页面$ hexo generate # 生成静态页面至public目录$ hexo server # 开启预览访问端口(默认端口4000，'ctrl+c'关闭server)$ hexo deploy # 项目部署$ hexo help # 查看帮助$ hexo version # 查看Hexo的版本 简写命令1234$ hexo new == hexo n$ hexo generate == hexo g$ hexo server == hexo s$ hexo deploy == hexo d 本地调试步骤123$ hexo clean$ hexo g$ hexo s --debug 这种带 debug 的运行，如果出现错误，可以在命令行中看到错误提示信息。 部署服务器上1234$ hexo clean #清理已经生成的静态文件$ hexo n #写文章$ hexo g #生成$ hexo d #部署 #可与hexo g合并为 hexo d -g 模版12345678title: 文章标题layout: postdate: 2014-03-03 19:07:43comments: true #评论是否开启categories: Blog #分类tags: [Hexo] #标签keywords: Hexo, Blog #关键字description: #描述 参考资料：HexoNexTPro Git修改NexT主题的Header样式NexT定制样式七牛图床]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F05%2F06%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
</search>